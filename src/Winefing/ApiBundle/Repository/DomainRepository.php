<?php

namespace Winefing\ApiBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * DomainRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DomainRepository extends \Doctrine\ORM\EntityRepository
{
    function findOneWithUser($userId)
    {
        $query = $this->createQueryBuilder('domain')
            ->join("domain.user", "user")
            ->where('user.id = :userId')
            ->setParameter('userId', $userId)
            ->setMaxResults(1)
            ->getQuery();
        return $query->getOneOrNullResult();
    }
    function findGroupByWineRegion()
    {
        $query = $this->createQueryBuilder('domain')
            ->innerJoin("domain.properties", "property")
            ->innerJoin("property.rentals", "rental")
            ->innerJoin("domain.user", "user")
            ->join("domain.wineRegion", "wineRegion")
            ->where("user.verify = 0")
            ->groupBy('wineRegion.id')
            ->getQuery();
        return $query->getResult();
    }
    function findOneWithMediaId($mediaId)
    {
        $query = $this->createQueryBuilder('domain')
            ->innerJoin("domain.medias", "medias")
            ->where('medias.id = :mediaId')
            ->setParameter('mediaId', $mediaId)
            ->setMaxResults(1)
            ->getQuery();
        return $query->getOneOrNullResult();
    }
    function findWithCriterias($maxperpage, $criterias) {
        //basic
        $queryBuilder = $this->createQueryBuilder('domain')
            ->innerJoin("domain.user", "user")
            ->innerJoin("domain.properties", "property")
            ->innerJoin("property.rentals", "rental")
            ->where("user.verify = 0");
        $peopleNumber = 1;
        if(array_key_exists("peopleNumber", $criterias)) {
            $peopleNumber = $criterias["peopleNumber"];
        }
        //add the condition on the people Number
        $queryBuilder
            ->andWhere("rental.peopleNumber >= :peopleNumer")
            ->setParameter("peopleNumer", $peopleNumber);

        if(array_key_exists("tags", $criterias)) {
            $queryBuilder
                ->innerJoin("domain.tags", "tag")
                ->andWhere("tag.id IN (:tags)")
                ->setParameter("tags", $criterias["tags"]);
        }

        //check for the wineRegion parameter
        if(array_key_exists("wineRegion", $criterias) && !empty($criterias["wineRegion"])) {
            $queryBuilder
                ->innerJoin("domain.wineRegion", "wineRegion")
                ->andWhere("wineRegion.id IN (:wineRegion)")
                ->setParameter("wineRegion", $criterias["wineRegion"]);
        }
        //check for the location available
        if(array_key_exists("startDate", $criterias) && !empty($criterias["startDate"])) {

        }
        //check for the price slider
        if(array_key_exists("price", $criterias) && !empty($criterias["price"])) {
            $price = explode(",",$criterias["price"]);
            $queryBuilder
            ->andWhere("rental.price >= :minPrice and rental.price <= :maxPrice")
            ->setParameter("minPrice", $price[0])
            ->setParameter("maxPrice", $price[1]);
        }
        //set the pagination
        $queryBuilder
            ->setFirstResult(($criterias['page']-1) * $maxperpage)
            ->setMaxResults($maxperpage);
        return new Paginator($queryBuilder);
    }
}
